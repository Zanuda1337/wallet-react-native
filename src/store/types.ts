import {	Action,	ActionCreatorsMapObject,	AsyncThunk,	ThunkAction,} from "@reduxjs/toolkit";import { store } from "./index";export type AppDispatch = typeof store.dispatch;export type RootState = ReturnType<typeof store.getState>;export type AppThunk<ReturnType = void> = ThunkAction<	ReturnType,	RootState,	unknown,	Action<string>	>;export type BoundActions<Actions extends ActionCreatorsMapObject> = {	[key in keyof Actions]: Actions[key] extends AsyncThunk<any, any, any>		? BoundAsyncThunk<Actions[key]>		: Actions[key];};export type BoundAsyncThunk<Thunk extends AsyncThunk<any, any, any>> = (	...args: Parameters<Thunk>) => ReturnType<ReturnType<Thunk>>;export type GenericAsyncThunk = AsyncThunk<unknown, unknown, any>;export type PendingAction = ReturnType<GenericAsyncThunk["pending"]>;export type RejectedAction = ReturnType<GenericAsyncThunk["rejected"]>;export type FulfilledAction = ReturnType<GenericAsyncThunk["fulfilled"]>;