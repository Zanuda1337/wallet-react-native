import React, { useEffect, useState } from "react";import { View, Text, Dimensions } from "react-native";import { calculatorStyles } from "./stytle";import IconButton from "src/components/iconButton/IconButton";import SvgSelector from "src/components/svgSelector/SvgSelector";import {  calculate,  extractNumbers,  extractOperations,  trimExpression,} from "src/components/calculator/Calculator.utils";import { KEYS } from "src/components/calculator/Calculator.consts";import { useIntl } from "react-intl";import { useStyles, useTheme } from "src/hooks";import Header from "src/components/header/Header";const screenWidth = Dimensions.get("screen").width;type TCalculatorProps = {  initialValue: number;  onSubmit: (result: number) => void;  onClose: () => void;};const Calculator: React.FC<TCalculatorProps> = ({  initialValue,  onClose,  onSubmit,}) => {  const style = useStyles(calculatorStyles);  const theme = useTheme();  const [expression, setExpression] = useState(`${initialValue}`);  const [result, setResult] = useState(0);  const [error, setError] = useState("");  const intl = useIntl();  const handlePress = (keyType: string) => {    switch (keyType) {      case "erase":        setExpression(expression.slice(0, expression.length - 1));        break;      case "C":        setExpression("");        setResult(0);        break;      case "-":      case "+":      case "*":      case "/":      case ".":        if (keyType === ".") {          const numbers = extractNumbers(expression);          if (!Number.isInteger(+numbers.at(-1))) return;        }        if (!expression.length) {          setExpression("0" + keyType);          return;        }        const lastSymbol = expression.at(-1);        if (isNaN(+lastSymbol)) {          setExpression(expression.slice(0, expression.length - 1) + keyType);          return;        }        setExpression(expression + keyType);        break;      case "0":      case "1":      case "2":      case "3":      case "4":      case "5":      case "6":      case "7":      case "8":      case "9":        if (          !isNaN(+expression.at(-1)) &&          extractNumbers(expression).at(-1) === 0 &&          extractOperations(expression, /\+|-|\*|\/|\./).at(-1) !== "."        ) {          setExpression(expression.slice(0, expression.length - 1) + keyType);          return;        }        setExpression(expression + keyType);        break;      case "=":        if (!isFinite(result)) {          setError("CANT_DIVIDE_BY_0");          return;        }        setExpression(`${result}`);        break;      case "submit":        if (!isFinite(result)) {          setError(`CANT_DIVIDE_BY_0`);          return;        }        onSubmit(result);        break;      default:        break;    }  };  const handleCalc = (text: string) => {    const value = calculate(text);    if (value) setResult(value);    if (!text.length) setResult(0);  };  const renderResult = (number: number): string => {    if (      `${number}` === trimExpression(expression) ||      !expression ||      !isFinite(result) ||      extractNumbers(expression).length <= 1    )      return "";    return `${number || 0}`;  };  useEffect(() => {    if (!expression.length) setExpression("0");    if (error) setError("");    setTimeout(() =>handleCalc(expression));  }, [expression]);  return (    <View style={style.calculator}>      <View style={[style.display, style.container]}>        <Header          label=""          styles={{root: {paddingHorizontal: 0}}}          leftButtonProps={{ visible: false }}          rightButtonProps={{            onPress: onClose,            size: 48,            icon: (              <SvgSelector id="multiply" stroke={theme.colors.foreground} size={20} />            ),          }}        />        <View style={style.textContainer}>          <Text            style={{              ...style.text,              color: error ? theme.colors.error : style.text.color,            }}          >            {expression}          </Text>          <Text            style={{              ...style.subtext,              color: error ? theme.colors.error : style.text.color,            }}          >            {error ? intl.formatMessage({ id: error }) : renderResult(result)}          </Text>        </View>      </View>      <View style={[style.keyboard, style.container]}>        {KEYS.map((key) => (          <IconButton            onPress={() => handlePress(key.type)}            size={screenWidth / 4 - 18 / 2 - 15}            styles={{              root:                key.type === "=" ? { width: (screenWidth / 4 - 15) * 2 } : {},            }}            key={key.type}            variant={key.color === "lightgray" ? "ghost" : "filled"}            color={theme.colors[key.color]}            icon={              key.icon ? (                <SvgSelector                  id={key.icon}                  fill={                    key.color === "blue"                      ? theme.colors.independentForeground                      : theme.colors.foreground                  }                  stroke={theme.colors.foreground}                  size={key.icon === "backspace" ? 30 : 20}                />              ) : (                <View>                  <Text                    style={{                      ...style.keyText,                      color:                        key.color === "primary"                          ? theme.colors.independentForeground                          : theme.colors.foreground,                    }}                  >                    {key.type}                  </Text>                </View>              )            }          />        ))}      </View>    </View>  );};export default Calculator;