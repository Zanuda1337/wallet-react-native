import React, { useEffect, useState } from "react";import {  Animated,  Dimensions,  FlatList,  Modal,  Text,  View,} from "react-native";import IconButton from "src/components/iconButton/IconButton";import { useStyles, useTheme, useTransition } from "src/hooks";import { iconSelectorStyles } from "./style";import SvgSelector from "src/components/svgSelector/SvgSelector";import { ITEM_ICONS } from "src/components/iconSelector/IconSelector.consts";import {FormattedMessage, useIntl} from "react-intl";import Header from "src/components/header/Header";const screenWidth = Dimensions.get("screen").width;type TIconSelectorProps = {  value: string;  label: string;  onChange: (icon: string) => void;  backgroundColor?: string;};const IconSelector: React.FC<TIconSelectorProps> = ({  value,  label,  backgroundColor,  onChange,}) => {  const theme = useTheme();  const style = useStyles(iconSelectorStyles);  const {formatMessage} = useIntl();  const [visible, setVisible] = useState(false);  const [show, setShow] = useState(false);  const top = useTransition(100, 0, visible, { duration: 400 });  const iconButtonSize = screenWidth / 6 - 10 - 4.5;  const iconSize = iconButtonSize * 0.4;  useEffect(() => {    if (visible) {      setShow(true);      return () => clearTimeout(id);    }    const id = setTimeout(() => {      setShow(false);    }, 370);    return () => clearTimeout(id);  }, [visible]);  return (    <View style={theme.styles.item}>      <Text style={theme.styles.label}>        <FormattedMessage id={label} />      </Text>      <View>        <IconButton          variant="ghost"          size={40}          icon={            <SvgSelector              id={value}              fill={theme.colors.foreground}              stroke={theme.colors.foreground}              size={20}            />          }          onPress={() => setVisible(true)}        />      </View>      <Modal visible={show} transparent={true}>        <>          <View            onTouchStart={() => setVisible(false)}            style={{ flexGrow: 1 }}          />          <Animated.View            style={{              ...style.content,              top: top.interpolate({                inputRange: [0, 100],                outputRange: ["0%", "100%"],              }),              maxHeight: Dimensions.get("screen").height * 0.4,            }}          >            <Header              label={formatMessage({id: 'CHOOSE_ICON'})}              rightButtonProps={{ visible: false }}              leftButtonProps={{                icon: (                  <SvgSelector                    id="downArrow"                    size={12}                    fill={theme.colors.foreground}                  />                ),                size: 35,                onPress: () => setVisible(false),              }}            />            <FlatList              contentContainerStyle={[theme.styles.container, style.list]}              numColumns={6}              data={ITEM_ICONS}              keyExtractor={(item) => item}              renderItem={({ item: icon }) => (                <View style={{ padding: 5 }}>                  <IconButton                    variant="filled"                    color={backgroundColor}                    size={iconButtonSize}                    onPress={() => {                      onChange(icon);                      setVisible(false);                    }}                    icon={                      <SvgSelector                        id={icon}                        fill={theme.colors.independentForeground}                        stroke={theme.colors.independentForeground}                        size={iconSize}                      />                    }                  />                </View>              )}            />          </Animated.View>        </>      </Modal>    </View>  );};export default IconSelector;