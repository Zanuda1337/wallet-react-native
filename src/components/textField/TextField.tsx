import React from "react";import {  Dimensions,  ScrollView, StyleProp,  StyleSheet,  Text,  TextInput,  TextInputProps,  View, ViewStyle,} from "react-native";import {textFieldStyles} from "./style";import SvgSelector from "src/components/svgSelector/SvgSelector";import {FormattedMessage, useIntl} from "react-intl";import {useStyles, useTheme} from "src/hooks";import {capitalize} from "src/utils";interface ITextFieldProps extends TextInputProps {  label: string;  disabled?: boolean;  error?: boolean;  message?: string;  onPress?: () => void;  styles?: {root?: StyleProp<ViewStyle>}}const TextField: React.FC<ITextFieldProps> = ({  label,  disabled,  message,  error,  onPress,  styles,  ...textInputProps}) => {  const style = useStyles(textFieldStyles);  const theme = useTheme()  const multiline = textInputProps.multiline && !!textInputProps.value;  const {formatMessage} = useIntl()  return (    <View      onTouchStart={onPress}      style={[StyleSheet.compose(        {          ...theme.styles.item,          borderBottomColor: error            ? theme.colors.error            : theme.styles.item.borderBottomColor,        },        multiline && style.multiline      ), styles?.root]}    >      <Text        style={{          ...theme.styles.label,          color: error ? theme.colors.error : theme.styles.label.color,          textTransform: "none",        }}      >        {capitalize(formatMessage({ id: label }))}      </Text>      <ScrollView style={{ maxHeight: Dimensions.get('screen').height * 0.2 }}>      <View style={[multiline ? style.multilineText : style.textContainer]}>          <TextInput            editable={!disabled}            style={[              theme.styles.value,              { textAlign: multiline ? "left" : "right" },            ]}            multiline={multiline}            {...textInputProps}          />      </View>        </ScrollView>      {!!message && (        <>          <View style={theme.styles.messagePopupArrow} />          <View style={theme.styles.messagePopupContainer}>            <SvgSelector id="warning" fill={theme.colors.error} size={20} />            <Text style={theme.styles.messagePopup}>              <FormattedMessage id={message} />            </Text>          </View>        </>      )}    </View>  );};export default TextField;