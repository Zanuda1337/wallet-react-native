import React, {useCallback, useState} from "react";import {  Modal,  View,  Text,  LayoutRectangle,  Animated,  StyleSheet,  Easing,  LayoutChangeEvent,} from "react-native";import TextField from "src/components/textField/TextField";import { selectStyles } from "./style";import Button from "src/components/button/Button";import { TOption } from "src/components/select/Select.types";import { useStyles, useTransition } from "src/hooks";import absoluteFill = StyleSheet.absoluteFill;import Switch from "../switch/Switch";type TMultiSelectProps = {  label: string;  options: TOption[];  values: string[];  onChange: (values: string[]) => void;  renderValues?: (values: TOption[]) => string;};const MultiSelect: React.FC<TMultiSelectProps> = ({  label,  options,  values,  onChange,  renderValues,}) => {  const style = useStyles(selectStyles);  const [visible, setVisible] = useState(false);  const [show, setShow] = useState(visible);  const transition = useTransition(0, 1, visible, {    duration: 250,    easing: Easing.cubic,  });  const handleClose = () => {    if (!visible) return;    setVisible(false);    setTimeout(() => setShow(false), 500);  };  const handleOpen = () => {    setVisible(true);    setShow(true);  };  const displayLabel = () => {    if (renderValues)      return renderValues(        values.map((value) => options.find((o) => o.value === value))      );    return values      .map((value) => options.find((o) => o.value === value).label)      .join(", ");  };  const handleChange = (value) => {    if (values.includes(value)) onChange(values.filter((v) => v !== value));    else onChange([...values, value]);  };  const [layout, setLayout] = useState<LayoutRectangle>();  const handleLayout = useCallback(    (event: LayoutChangeEvent) => {      setLayout(event.nativeEvent.layout);      // console.log(event.nativeEvent.layout)    },    [show, visible]  );  return (    <View onLayout={handleLayout}>      <TextField        label={label}        disabled={true}        value={displayLabel()}        onPress={handleOpen}      />      <Modal visible={show} transparent={true} statusBarTranslucent onRequestClose={handleClose}>        <View style={[absoluteFill]} onTouchStart={handleClose}>          <Animated.View            onTouchStart={(e) => e.stopPropagation()}            style={{              ...style.container,              top: transition.interpolate({                inputRange: [0, 1],                outputRange: [                  60 + layout?.y + +layout?.height,                  83  + layout?.y + +layout?.height,                ],              }) || 0,              transform: [                {                  scale: transition.interpolate({                    inputRange: [0, 1],                    outputRange: [0.8, 1],                  }),                },              ],              opacity: transition,            }}          >            {options.map((option) => (              <Button                translate={false}                key={option.value}                text={option.label}                variant={"ghost"}                fullWidth                styles={{ root: style.option, text: style.optionText }}                onPress={() => handleChange(option.value)}              >                <View                  style={[                    style.option,                    { paddingVertical: 0, paddingHorizontal: 0, gap: 20 },                  ]}                >                  <View pointerEvents="none">                    <Switch                      checked={values.includes(option.value)}                      onChange={() => {}}                    />                  </View>                  <Text style={style.optionText}>{option.label}</Text>                </View>              </Button>            ))}          </Animated.View>        </View>      </Modal>    </View>  );};export default MultiSelect;