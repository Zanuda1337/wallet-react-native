import React from "react";import {  Modal,  View,  StyleSheet,  StyleProp,  ViewStyle,} from "react-native";import {dialogueStyles} from "./style";import Header from "src/components/header/Header";import SvgSelector from "src/components/svgSelector/SvgSelector";import Button, { IButtonProps } from "src/components/button/Button";import {useIntl} from "react-intl";import {useStyles, useTheme} from "src/hooks";interface IDialogueButtonProps extends IButtonProps {  visible?: boolean;}type TDialogueProps = {  visible: boolean;  children: JSX.Element;  onBackdropPress?: () => void;  onClose?: () => void;  cancelButtonProps?: IDialogueButtonProps;  submitButtonProps?: IDialogueButtonProps;  header?: JSX.Element;  styles?: {    root?: StyleProp<ViewStyle>;    content?: StyleProp<ViewStyle>;    container?: StyleProp<ViewStyle>;    footer?: StyleProp<ViewStyle>;  };};const Dialogue: React.FC<TDialogueProps> = ({  header,  visible,  cancelButtonProps,  submitButtonProps,  children,  onBackdropPress,  onClose,  styles,}) => {  const intl = useIntl()  const style = useStyles(dialogueStyles);  const theme = useTheme()  const cancelPropsWithDefaults: IDialogueButtonProps = {    ...cancelButtonProps,    visible: cancelButtonProps?.visible !== undefined ? cancelButtonProps?.visible : true,    text: cancelButtonProps?.text || "cancel",    styles: {      root: [        style.button,        style.leftButton,        StyleSheet.flatten(cancelButtonProps?.styles?.root),      ],      text: [style.leftButtonText, cancelButtonProps?.styles?.text],    },  };  const submitPropsWithDefaults: IDialogueButtonProps = {    ...submitButtonProps,    visible: submitButtonProps?.visible !== undefined ? submitButtonProps?.visible : true,    text: submitButtonProps?.text || "confirm",    styles: {      root: [style.button, StyleSheet.flatten(submitButtonProps?.styles?.root)],    },  };  return (    <Modal visible={visible} transparent animationType="fade" statusBarTranslucent onRequestClose={onClose}>      {visible && <View style={style.backdrop} onTouchStart={onBackdropPress}>        <View          style={[style.wrapper, styles?.root]}          onTouchStart={(e) => e.stopPropagation()}        >          {header || (            <Header              styles={{root: style.header}}              label={intl.formatMessage({id: 'ARE_YOU_SURE'})}              leftButtonProps={{visible: false}}              rightButtonProps={{                onPress: onClose,                icon: (                  <SvgSelector                    id="multiply"                    stroke={theme.colors.foreground}                    size={20}                  />                ),                size: 42,              }}            />          )}          <View style={[style.content, styles?.content]}>            <View style={[theme.styles.container, styles?.container]}>              {children}            </View>          </View>          <View style={[style.footer, styles?.footer]}>            {cancelPropsWithDefaults.visible && (              <Button {...cancelPropsWithDefaults} />            )}            {submitPropsWithDefaults.visible && (              <Button {...submitPropsWithDefaults} />            )}          </View>        </View>      </View>}    </Modal>  );};export default Dialogue;