import React from "react";import {  StyleProp, TextStyle,  TouchableNativeFeedback,  TouchableWithoutFeedbackProps,} from "react-native";import { theme } from "src/assets/styles/theme";import { Animated, Text } from "react-native";import { style } from "./style";import {AnimatedStyle} from "src/types";import {FormattedMessage} from "react-intl";export interface IButtonProps extends TouchableWithoutFeedbackProps {  translate?: boolean,  children?: JSX.Element;  styles?: { root?: AnimatedStyle | AnimatedStyle[], text?: StyleProp<TextStyle> };  size?: number | "small" | "medium" | "large";  color?: string;  variant?: "outlined" | "filled" | "ghost";  text?: string;  fullWidth?: boolean;}const Button: React.FC<IButtonProps> = ({  styles,  variant = "filled",  children,  text,  fullWidth,  color = theme.colors.primary,  translate= true,  ...touchableProps}) => {  const containerStyles = [    { width: fullWidth ? "100%" : "auto" },    style.button,    styles?.root,  ];  if (variant === "ghost") containerStyles.push({});  else if (variant === "outlined") containerStyles.push(theme.styles.outline);  else if (variant === "filled")    containerStyles.unshift({ backgroundColor: color });  return (    <TouchableNativeFeedback      {...touchableProps}      background={TouchableNativeFeedback.Ripple(        "rgba(210,236,248,0.55)",        false      )}    >      <Animated.View style={containerStyles}>        {children || (          <Text            style={[              {                ...style.buttonText,                color:                  variant === "ghost"                    ? theme.colors.foreground                    : style.buttonText.color,              },              styles?.text,            ]}          >            {translate ? <FormattedMessage id={text}/> : text}          </Text>        )}      </Animated.View>    </TouchableNativeFeedback>  );};export default Button;