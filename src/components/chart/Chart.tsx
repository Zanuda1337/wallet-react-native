import React, { useCallback, useState } from "react";import {  NativeScrollEvent, NativeSyntheticEvent,  View,  ViewToken} from "react-native";import { useStyles } from "src/hooks";import { histogramStyles } from "src/components/chart/histogram/style";import WithGrid from "src/components/chart/histogram/withGrid/WithGrid";import Bar from "src/components/chart/histogram/bar/Bar";import moment from "moment";import { FlashList } from "@shopify/flash-list";type TChartItem = { id: number; a: number; b: number; date: Date };type TChartsProps = {  data: TChartItem[];  height?: number;  renderLabel: (item: TChartItem) => string;  onChangeRange: (date: Date) => void;  range: Date[];};const Chart: React.FC<TChartsProps> = ({  data,  height = 220,  range,  renderLabel,  onChangeRange,}) => {  const style = useStyles(histogramStyles);  const [viewableItems, setViewableItems] = useState(data);  const [isSidebarVisible, setSidebarVisible] = useState(true);  const [endReached, setEndReached] = useState(false);  const maxA = Math.max(...viewableItems.map((item) => item.a), 0);  const maxB = Math.max(...viewableItems.map((item) => item.b), 0);  const max = Math.max(maxA, maxB);  const zoom = 1;  const modifier = +"1".padEnd(Math.round(max).toString().length, "0");  const displayHeight = Math.ceil(max / modifier) * modifier;  const isEnabled = (date) =>    range.length &&    date.getTime() >= range[0].getTime() &&    date.getTime() <= range[1].getTime();  const handleViewableItemsChange = useCallback(    (e: { viewableItems: ViewToken[]; changed: ViewToken[] }) => {      setViewableItems(e.viewableItems.map((i) => i.item));    },    []  );  const handleScroll = useCallback((event:  NativeSyntheticEvent<NativeScrollEvent>) => {    event.stopPropagation();    if(endReached)setSidebarVisible(false)    if(!event.nativeEvent.velocity.x) return    setEndReached(false);    setSidebarVisible(true)  }, [endReached]);  const handlePressBar = useCallback((date) => onChangeRange(date), [range]);  return (    <View style={[style.container]}>      <WithGrid        zoom={zoom}        displayHeight={displayHeight}        height={height}        sidebarVisible={isSidebarVisible}      >        <View style={[style.scrollContainer]}>          <FlashList            onEndReached={() => setEndReached(true)}            onScroll={handleScroll}            onTouchStart={(event) => event.stopPropagation()}            data={[...data].reverse()}            onViewableItemsChanged={handleViewableItemsChange}            viewabilityConfig={{ itemVisiblePercentThreshold: 50 }}            estimatedItemSize={40}            horizontal            inverted            keyExtractor={(item) => item.id.toString()}            renderItem={({ item }) => (              <Bar                a={item.a}                b={item.b}                label={renderLabel(item)}                height={height}                zoom={zoom}                displayHeight={displayHeight}                isActive={                  moment(range[0]).isSame(item.date) ||                  moment(range[1]).isSame(item.date)                }                isEnabled={isEnabled(item.date)}                isPale={range.length ? isEnabled(item.date) : true}                isLast={item.id === data.at(-1).id}                onPress={() => handlePressBar(item.date)}              />            )}          />        </View>      </WithGrid>    </View>  );};export default Chart;