import React, {useCallback, useState} from "react";import {FlatList, View, ViewToken} from "react-native";import {useStyles} from "src/hooks";import {histogramStyles} from "src/components/chart/histogram/style";import WithGrid from "src/components/chart/histogram/withGrid/WithGrid";import Bar from "src/components/chart/histogram/bar/Bar";import moment from "moment";type TChartItem = {id: number;  a: number;  b: number;  date: Date;}type TChartsProps = {  data: TChartItem[];  height?: number,  renderLabel: (item: TChartItem) => string;  onChangeRange: (date: Date) => void  range: Date[]};const Chart: React.FC<TChartsProps> = ({ data, height = 220,range,renderLabel, onChangeRange }) => {  const style = useStyles(histogramStyles);  const [viewableItems, setViewableItems] = useState([]);  const maxA = Math.max(...viewableItems.map((item) => item.a)) || 0;  const maxB = Math.max(...viewableItems.map((item) => item.b)) || 0;  const max = Math.max(maxA, maxB);  const zoom = 1;  const modifier = +"1".padEnd(max.toString().length, "0");  const displayHeight = Math.ceil(max / modifier) * modifier;  const isEnabled = (date) => range.length && date.getTime() >= range[0].getTime() && date.getTime() <= range[1].getTime()  const handleViewableItemsChange = useCallback(    (e: { viewableItems: ViewToken[]; changed: ViewToken[] }) => {      setViewableItems(e.viewableItems.map((i) => i.item));    },    []  );  const handlePressBar = useCallback(    (date) =>      onChangeRange(date)    ,    [range]  );  return (    <View style={style.container}>      <WithGrid zoom={zoom} displayHeight={displayHeight} height={height}>        <FlatList          initialNumToRender={10}          onScroll={(e) => e.stopPropagation()}          onTouchStart={(event) => event.stopPropagation()}          data={[...data].reverse()}          onViewableItemsChanged={handleViewableItemsChange}          viewabilityConfig={{ itemVisiblePercentThreshold: 0 }}          contentContainerStyle={[style.scrollContainer]}          horizontal          inverted          keyExtractor={(item, index) => item.id.toString()}          renderItem={({ item }) => (            <Bar              a={item.a}              b={item.b}              label={renderLabel(item)}              height={height}              zoom={zoom}              displayHeight={displayHeight}              isActive={moment(range[0]).isSame(item.date) || moment(range[1]).isSame(item.date)}              isEnabled={isEnabled(item.date)}              isPale={range.length ? isEnabled(item.date) : true}              isLast={item.id === data.at(-1).id}              onPress={() => handlePressBar(item.date)}            />          )}        />      </WithGrid>    </View>  );};export default Chart;