import React from "react";import { Modal, View } from "react-native";import {  TItem,  TItemCategories,} from "features/transactions/Transactions.types";import {itemModalstyles} from "./style";import Header from "src/components/header/Header";import Form from "src/components/form/Form";import RenderIconSelector from "src/components/form/renderIconSelector/RenderIconSelector";import SvgSelector from "src/components/svgSelector/SvgSelector";import {useStyles, useTheme} from "src/hooks";import {getItemColors} from "features/transactions/Tansactions.utils";type TItemModalProps = {  initialValues: Pick<TItem, "name" | "icon">;  visible: boolean;  label: string;  itemType: TItemCategories;  onClose: () => void;  onSubmit: (item: Pick<TItem, "name" | "icon">) => void;  onDelete?: () => void;};const ItemModal: React.FC<TItemModalProps> = ({  visible,  initialValues,  label,  itemType,  onClose,  onDelete,  onSubmit,}) => {  const style = useStyles(itemModalstyles);  const theme = useTheme()  const itemColors = getItemColors(theme)  return (    <Modal visible={visible}>      {visible && (        <>          <View style={{paddingBottom: 15, backgroundColor: theme.colors.background}}>            <Header              label={label}              leftButtonProps={{onPress: onClose, visible: true}}              rightButtonProps={                onDelete                  ? {                    onPress: onDelete,                    icon: (                      <SvgSelector                        id="delete"                        size={25}                        fill={theme.colors.foreground}                      />                    ),                  }                  : {visible: false}              }            />          </View>          <View style={[style.container, theme.styles.container]}>            <Form              fields={[                {                  name: "name",                  rules: {required: "REQUIRED_FIELD"},                  initialValue: initialValues.name,                },                {                  name: "icon",                  component: RenderIconSelector,                  initialValue: initialValues.icon,                  props: {backgroundColor: itemColors[itemType]},                },              ]}              onSubmit={onSubmit}            />          </View>        </>      )}    </Modal>  );}export default ItemModal;