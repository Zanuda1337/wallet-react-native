import React from "react";import { Controller, useForm } from "react-hook-form";import RenderTextField from "src/components/form/renderTextField/RenderTextField";import { View } from "react-native";import Button from "src/components/button/Button";import { TField } from "src/components/form/Form.types";import { toNormalCase } from "src/utils";type TFormProps = {  fields: TField[];  submitOnChange?: boolean;  onSubmit: (data: any) => void;  onChange?: (data: any) => void;};const objectFromArray = (  array: Record<string, any>[],  key: string,  value: string): Record<string, any> => {  const object = {};  array.forEach((el) => (object[el[key]] = el[value]));  return object;};const getFields = (fields: TField[]): TField[] =>  fields.map((field) => ({    ...field,    label: field.label || toNormalCase(field.name),    initialValue: field.initialValue !== "" ? field.initialValue : "",    component: field.component || RenderTextField,  }));const Form: React.FC<TFormProps> = ({  fields,  submitOnChange,  onChange,  onSubmit,}) => {  const normalizedFields = getFields(fields);  const defaultValues = objectFromArray(    normalizedFields,    "name",    "initialValue"  );  const { control, handleSubmit, watch } = useForm({    defaultValues,    mode: "all",  });  if (onChange) watch((data) => onChange(data));  return (    <>      {normalizedFields.map((field) => (        <Controller          key={field.name}          control={control}          name={field.name}          rules={field.rules}          render={(renderProps) =>            field.component({              label: field.label,              ...{                ...renderProps,                field: {                  ...renderProps.field,                  onChange: (data) => {                    renderProps.field.onChange(data);                    if(submitOnChange) {                      handleSubmit(onSubmit)();                    }                  },                },              },              ...field.props,            })          }        />      ))}      {!submitOnChange && <View style={{marginVertical: 15}}>        <Button text="save" onPress={handleSubmit(onSubmit)}/>      </View>}    </>  );};export default Form;