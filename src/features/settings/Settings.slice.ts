import { createSlice, PayloadAction } from "@reduxjs/toolkit";import { getLocales } from "expo-localization";import { LOCALES } from "src/consts";interface SettingsState {  theme: "system" | "light" | "dark";  locale: string;  currency: string;  initialized: boolean;}const initialState: SettingsState = {  theme: "system",  locale: "en",  currency: "USD",  initialized: false,};const currencies = ["USD", "RUB"];const settingsSlice = createSlice({  name: "settingsReducer",  initialState,  reducers: {    setSettings: (      state,      action: PayloadAction<{        theme: "system" | "light" | "dark";        locale: string;        currency: string;      }>    ) => {      state.theme = action.payload.theme;      state.locale = action.payload.locale;      state.currency = action.payload.currency;    },    init: (state) => {      const systemLocale = getLocales()[0];      const defaultLocale = LOCALES.map(({locale}) => locale).includes(systemLocale?.languageCode)        ? systemLocale?.languageCode        : "en";      const defaultTheme = "system";      const defaultCurrency = currencies.includes(systemLocale?.currencyCode)        ? systemLocale?.currencyCode        : "USD";      state.theme = defaultTheme;      state.locale = defaultLocale;      state.currency = defaultCurrency;      state.initialized = true;    },    import: (state, action: PayloadAction<SettingsState>) => {      state.initialized = action.payload.initialized;      state.currency = action.payload.currency;      state.locale = action.payload.locale;      state.theme = action.payload.theme;    }  },});export const { actions: settingsActions, reducer: settingsReducer } =  settingsSlice;