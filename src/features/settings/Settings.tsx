import React, { useEffect } from "react";import { View } from "react-native";import Form from "src/components/form/Form";import { theme } from "src/assets/styles/theme";import RenderSelect from "src/components/form/renderSelect/RenderSelect";import { useAppSelector, useBoundActions } from "src/store/hooks";import { settingsActions } from "src/features/settings/Settings.slice";import { capitalize } from "src/utils";import { useIntl } from "react-intl";import {currencies} from "src/consts";type TSettingsProps = {};const Settings: React.FC<TSettingsProps> = ({}) => {  const appTheme = useAppSelector((state) => state.settingsReducer.theme);  const locale = useAppSelector((state) => state.settingsReducer.locale);  const currency = useAppSelector((state) => state.settingsReducer.currency);  const boundActions = useBoundActions(settingsActions);  const intl = useIntl();  const initialized = useAppSelector(    (state) => state.settingsReducer.initialized  );  useEffect(() => {    if (!initialized) {      boundActions.init();    }  }, [initialized]);  return (    <View style={theme.styles.container}>      <Form        fields={[          {            name: "theme",            initialValue: appTheme,            props: {              options: [                { value: "system", label: "system" },                { value: "light", label: "light" },                { value: "dark", label: "dark" },              ],            },            component: RenderSelect,          },          {            name: "locale",            label: "language",            initialValue: locale,            props: {              options: [                { value: "ru", label: "russian" },                { value: "en", label: "english" },                { value: "uk", label: "ukrainian" },                { value: "be", label: "belorussian" },              ],            },            component: RenderSelect,          },          {            name: "currency",            initialValue: currency,            props: {              options: currencies,              renderValue: (value) => value            },            component: RenderSelect,          },        ]}        onSubmit={(data) => {          boundActions.setSettings({ ...data });        }}        submitOnChange      />    </View>  );};export default Settings;