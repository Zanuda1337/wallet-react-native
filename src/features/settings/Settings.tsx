import React, { useState } from "react";import { Dimensions, FlatList, ScrollView, Text, View } from "react-native";import Form from "src/components/form/Form";import RenderSelect from "src/components/form/renderSelect/RenderSelect";import { useAppSelector, useBoundActions } from "src/store/hooks";import {  defaultColors,  settingsActions,} from "src/features/settings/Settings.slice";import { CURRENCIES, LOCALES } from "src/consts";import { useTheme } from "src/hooks";import Button from "src/components/button/Button";import { capitalize } from "src/utils";import { FormattedMessage, useIntl } from "react-intl";import * as DocumentPicker from "expo-document-picker";import * as FileSystem from "expo-file-system";import { EncodingType } from "expo-file-system";import { exportJsonFile } from "./Settings.utils";import { importState } from "src/features/app/App.slice";import { useNotice } from "src/components/notice/Notice.hooks";import Header from "src/components/header/Header";import SvgSelector from "src/components/svgSelector/SvgSelector";import Dialogue from "src/components/dialogue/Dialogue";import { ColorPicker, fromHsv, toHsv } from "react-native-color-picker";import { HsvColor } from "react-native-color-picker/dist/typeHelpers";import Slider from "@react-native-community/slider";import {  darkThemeColors,  lightThemeColors,} from "src/providers/themeProvider/ThemeProvider";type TSettingsProps = {};const Settings: React.FC<TSettingsProps> = ({}) => {  const appTheme = useAppSelector((state) => state.settingsReducer.theme);  const locale = useAppSelector((state) => state.settingsReducer.locale);  const currency = useAppSelector((state) => state.settingsReducer.currency);  const userTheme: typeof defaultColors =    useAppSelector((state) => state.settingsReducer.userTheme) || defaultColors;  const incomesList =    useAppSelector(      (state) => state.settingsReducer.layout?.transactions?.income?.list    ) || "horizontal";  const walletsList =    useAppSelector(      (state) => state.settingsReducer.layout?.transactions?.wallet?.list    ) || "horizontal";  const expensesList =    useAppSelector(      (state) => state.settingsReducer.layout?.transactions?.expense?.list    ) || "vertical";  const settingsReducer = useAppSelector((state) => state.settingsReducer);  const transactionsReducer = useAppSelector(    (state) => state.transactionsReducer  );  const rootState = { settingsReducer, transactionsReducer };  const { formatMessage } = useIntl();  const boundActions = useBoundActions({ ...settingsActions, importState });  const theme = useTheme();  const { enqueueNotice } = useNotice();  const [color, setColor] = useState(toHsv(userTheme.primary));  const [currentColor, setCurrentColor] = useState("primary");  const [themeEditOpen, setThemeEditOpen] = useState(false);  const onColorChange = (color: HsvColor) => {    setColor(color);    boundActions.setThemeColor({      colorName: currentColor as keyof typeof defaultColors,      color: fromHsv(color),    });  };  const handleThemeEditOpen = () => {    setThemeEditOpen(true);  };  const handleThemeEditClose = () => {    setThemeEditOpen(false);  };  const handleImport = async () => {    try {      const document = await DocumentPicker.getDocumentAsync({        copyToCacheDirectory: false,      });      if (document.type !== "success") throw new Error("cancel");      if (document.mimeType !== "application/json") {        enqueueNotice("JSON_FILE_EXT_ERROR", { type: "error" });        throw new Error("JSON_FILE_EXT_ERROR");      }      const data = await FileSystem.readAsStringAsync(document.uri, {        encoding: EncodingType.UTF8,      });      try {        const parsedData = JSON.parse(data);        if (          JSON.stringify(Object.keys(parsedData)) !==          JSON.stringify(Object.keys(rootState))        )          throw new Error();        boundActions.importState(parsedData);        enqueueNotice("DATA_SUCCESSFULLY_IMPORTED", { type: "success" });      } catch (e) {        enqueueNotice("INCORRECT_DATA", { type: "error" });      }    } catch (e) {      console.error(e);    }  };  const handleExport = async () => {    try {      await exportJsonFile("wallet_app_data", rootState);    } catch (e) {      enqueueNotice(e.message, { type: "error" });    }  };  return (    <ScrollView>      <Dialogue        visible={themeEditOpen}        onClose={handleThemeEditClose}        styles={{          root: {            padding: 0,            maxHeight: Dimensions.get("screen").height * 0.9,            overflow: "hidden",            flexGrow: 1,            paddingBottom: 60,          },        }}        header={          <Header            styles={{              root: {                paddingHorizontal: 0,                paddingVertical: 0,                marginTop: 0,                marginHorizontal: 18,              },            }}            label={capitalize(formatMessage({ id: "SET_THEME" }))}            leftButtonProps={{ visible: false }}            rightButtonProps={{              onPress: handleThemeEditClose,              icon: (                <SvgSelector                  id="multiply"                  stroke={theme.colors.foreground}                  size={20}                />              ),              size: 42,            }}          />        }        cancelButtonProps={{ visible: false }}        submitButtonProps={{ visible: false }}        onBackdropPress={handleThemeEditClose}      >        <View          style={{            width: "100%",            display: "flex",            flexDirection: "column",            height: "100%",          }}        >          <View style={{ height: 200, marginTop: -30 }}>            <ColorPicker              onColorChange={(value) => onColorChange({ ...color, h: value.h })}              color={color}              style={{ flex: 1 }}              hideSliders            />          </View>          <Text            style={[              theme.styles.label,              { marginHorizontal: 20, marginVertical: 5 },            ]}          >            <FormattedMessage id={"saturation"} />          </Text>          <Slider            value={color.s}            onValueChange={(value) => onColorChange({ ...color, s: value })}            maximumTrackTintColor={theme.colors.primary}            minimumTrackTintColor={theme.colors.primary}            thumbTintColor={theme.colors.primary}          />          <Text            style={[              theme.styles.label,              { marginHorizontal: 20, marginVertical: 5 },            ]}          >            <FormattedMessage id={"brightness"} />          </Text>          <Slider            value={color.v}            onValueChange={(value) => onColorChange({ ...color, v: value })}            maximumTrackTintColor={theme.colors.primary}            minimumTrackTintColor={theme.colors.primary}            thumbTintColor={theme.colors.primary}          />          <Text            style={[              theme.styles.label,              {                marginVertical: 5,                marginTop: 20,                color: theme.colors.foreground,              },            ]}          >            <FormattedMessage id={"theme"} />          </Text>          <View            style={{              flexGrow: 1,              overflow: "hidden",              height: 100,              marginTop: 20,            }}          >            <FlatList              data={Object.entries(userTheme)}              keyExtractor={([label]) => label}              renderItem={({ item: [key, value] }) => (                <View                  style={{                    display: "flex",                    justifyContent: "space-between",                    flexDirection: "row",                    paddingVertical: 4,                    paddingHorizontal: 10,                    marginVertical: 1,                    backgroundColor:                      currentColor === key                        ? `${theme.colors.primaryLight}40`                        : undefined,                    borderRadius: 6,                  }}                  onTouchEnd={() => {                    setCurrentColor(key);                    setColor(toHsv(value));                  }}                >                  <Text style={{ ...theme.styles.value, fontSize: 12 }}>                    {key}                  </Text>                  <View                    style={{                      width: 60,                      height: 20,                      backgroundColor: value,                      borderRadius: 10,                      borderWidth: 1,                      borderColor: theme.colors.background,                    }}                  />                </View>              )}            />          </View>        </View>      </Dialogue>      <View style={theme.styles.container}>        <Text style={theme.styles.title}>          <FormattedMessage id="common" />        </Text>        <Form          fields={[            {              name: "theme",              initialValue: appTheme,              props: {                options: [                  { value: "system", label: "system" },                  { value: "light", label: "light" },                  { value: "dark", label: "dark" },                  { value: "user", label: "custom" },                ],              },              component: RenderSelect,            },            {              name: "locale",              label: "language",              initialValue: locale,              props: {                options: LOCALES.map(({ locale, label }) => ({                  value: locale,                  label,                })),              },              component: RenderSelect,            },            {              name: "currency",              initialValue: currency,              props: {                options: CURRENCIES,                renderValue: (value) => value,              },              component: RenderSelect,            },          ]}          onSubmit={(data) => {            boundActions.setSettings({ ...data });          }}          submitOnChange        />        {appTheme === "user" && (          <>            <Text              style={{                ...theme.styles.title,                marginTop: 20,              }}            >              <FormattedMessage id="theme" />            </Text>            <Button onPress={handleThemeEditOpen} text={"tune"} />            <Button              onPress={() => boundActions.setTheme(darkThemeColors)}              variant={"outlined"}              styles={{                text: { textTransform: "none", color: theme.colors.foreground },              }}              translate={false}              text={formatMessage({ id: "COPY_LIGHT_THEME" })}            />            <Button              onPress={() => boundActions.setTheme(lightThemeColors)}              variant={"outlined"}              styles={{                text: { textTransform: "none", color: theme.colors.foreground },              }}              translate={false}              text={formatMessage({ id: "COPY_DARK_THEME" })}            />          </>        )}        <Text          style={{            ...theme.styles.title,            marginTop: 20,          }}        >          <FormattedMessage id="layout" />        </Text>        <Form          fields={[            {              name: "income",              label: "incomes_list",              initialValue: incomesList,              props: {                options: [                  { value: "horizontal", label: "horizontal" },                  { value: "vertical", label: "vertical" },                ],              },              component: RenderSelect,            },            {              name: "wallet",              label: "wallets_list",              initialValue: walletsList,              props: {                options: [                  { value: "horizontal", label: "horizontal" },                  { value: "vertical", label: "vertical" },                ],              },              component: RenderSelect,            },            {              name: "expense",              label: "expenses_list",              initialValue: expensesList,              props: {                options: [                  { value: "horizontal", label: "horizontal" },                  { value: "vertical", label: "vertical" },                ],              },              component: RenderSelect,            },          ]}          onSubmit={(data) => {            boundActions.setLayout({ ...data });          }}          submitOnChange        />        <Text          style={{            ...theme.styles.title,            textTransform: "none",            marginTop: 20,          }}        >          {capitalize(formatMessage({ id: "IMPORT_AND_EXPORT" }))}        </Text>        <View style={{ display: "flex", flexDirection: "row", gap: 20 }}>          <Button            text={capitalize(formatMessage({ id: "CHOOSE_FILE" }))}            styles={{              root: { flex: 1 },              text: { textTransform: "none", color: theme.colors.foreground },            }}            translate={false}            variant="outlined"            onPress={handleImport}          />          <Button            text={capitalize(formatMessage({ id: "EXPORT_DATA" }))}            styles={{ root: { flex: 1 }, text: { textTransform: "none" } }}            translate={false}            onPress={handleExport}          />        </View>        <Text          style={{            ...theme.styles.title,            textTransform: "none",          }}        >          Версия:          <Text            style={{              ...theme.styles.dialogueText,            }}          >            {" 1.0.2"}          </Text>        </Text>      </View>      <View style={{ marginBottom: 100 }} />    </ScrollView>  );};export default Settings;