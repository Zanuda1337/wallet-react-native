import React, { useState } from "react";import { FlatList, Text, View } from "react-native";import { useTheme } from "src/hooks";import Transaction from "features/feed/transaction/Transaction";import { useAppSelector, useBoundActions } from "src/store/hooks";import { FormattedMessage } from "react-intl";import { transactionsActions } from "../transactions/Transactions.slice";import { LayoutAnimation } from "react-native";import TransactionModal, {  ITransactionFieldValues,} from "src/components/transactionModal/TransactionModal";import { TTransaction } from "features/transactions/Transactions.types";import {useLinkPressHandler} from "react-router-native";import Header from "src/components/header/Header";const layoutAnimConfig = {  duration: 300,  update: {    type: LayoutAnimation.Types.easeInEaseOut,  },  delete: {    duration: 300,    type: LayoutAnimation.Types.easeInEaseOut,    property: LayoutAnimation.Properties.opacity,  },};const RepeatTemplates: React.FC = () => {  const theme = useTheme();  const repeatTemplates: TTransaction[] = useAppSelector(    (state) => state.transactionsReducer.repeatTemplates  );  const items = useAppSelector((state) => state.transactionsReducer.items);  const [isTransaction, setTransaction] = useState(false);  const [activeTransaction, setActiveTransaction] =    useState<TTransaction>(undefined);  const transferredItem = items.find(    (item) => activeTransaction?.fromItemId === item.id  );  const acceptedItem = items.find(    (item) => activeTransaction?.toItemId === item.id  );  const boundActions = useBoundActions(transactionsActions);  const handleDelete = (id: number) => {    boundActions.deleteRepeatTemplate(id);    LayoutAnimation.configureNext(layoutAnimConfig);  };  const handleEdit = (data: ITransactionFieldValues) => {    const transaction: TTransaction = {      ...activeTransaction,      ...data,      date: data.date.toString(),    };    boundActions.editRepeatTemplate(transaction);    setTransaction(false);  };  const linkHandler = useLinkPressHandler('/');  return (    <>      <Header label='' leftButtonProps={{visible: true, onPress: linkHandler}} rightButtonProps={{visible: false}}/>      <Text style={[theme.styles.container, {...theme.styles.title, textTransform: 'none'}]}><FormattedMessage id='MONTHLY_TRANSACTIONS' /></Text>      {repeatTemplates.length > 0 ? (        <FlatList          data={repeatTemplates}          keyExtractor={(item) => item.id.toString()}          renderItem={({ item: transaction }) => {            const fromItem = items.find(              (item) => item.id === transaction.fromItemId            );            const toItem = items.find(              (item) => item.id === transaction.toItemId            );            if (!fromItem || !toItem) return <></>;            return (              <View style={theme.styles.container}>                <Transaction                  amount={transaction.amount}                  fromItem={fromItem}                  toItem={toItem}                  disabled={isTransaction}                  onDelete={() => handleDelete(transaction.id)}                  onEdit={() => {                    setTransaction(true);                    setActiveTransaction(transaction);                  }}                />              </View>            );          }}        />      ) : (        <View          style={[            theme.styles.container,            {              display: "flex",              flex: 1,              justifyContent: "center",              alignItems: "center",              paddingBottom: 100,            },          ]}        >          <Text            style={[              theme.styles.title,              { textTransform: "none", fontSize: 16 },            ]}          >            <FormattedMessage id="NO_DATA" />          </Text>        </View>      )}      <TransactionModal        visible={isTransaction}        from={transferredItem?.name}        to={acceptedItem?.name}        icon={acceptedItem?.icon}        onHide={() => setActiveTransaction(undefined)}        onSubmit={(data) => handleEdit(data)}        onBackdropPress={() => setTransaction(false)}        initialValues={{          date: new Date(activeTransaction?.date),          amount: activeTransaction?.amount,          note: activeTransaction?.note,        }}        edit      />      <View style={{ marginBottom: 120 }} />    </>  );};export default RepeatTemplates;