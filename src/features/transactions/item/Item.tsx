import React, { useEffect, useState } from "react";import { Text, Animated, Easing } from "react-native";import { transactionStyles } from "features/transactions/style";import IconButton from "src/components/iconButton/IconButton";import SvgSelector from "src/components/svgSelector/SvgSelector";import { useFormatMoney, useStyles, useTheme, useTransition } from "src/hooks";import { getItemColors } from "features/transactions/Tansactions.utils";import CircularProgress from "src/components/circularProgress/CircularProgress";type TItemProps = {  type: "income" | "wallet" | "expense";  name: string;  icon: string;  cashFlow?: number;  isActive: boolean;  disabled: boolean;  fullWidth?: boolean;  onPress: () => void;  onLongPress: () => void;};const Item: React.FC<TItemProps> = ({  type,  name,  icon,  cashFlow,  isActive,  disabled,  onLongPress,  onPress,  fullWidth,}) => {  const style = useStyles(transactionStyles);  const theme = useTheme();  const itemColors = getItemColors(theme);  const [pressingTime, setPressingTime] = useState(0);  const [focused, setFocused] = useState(false);  const opacity = useTransition(1, 0.3, isActive);  const containerOpacity = useTransition(1, 0.5, disabled);  const top = useTransition(0, 7, isActive, {    duration: 150,    easing: Easing.ease,  });  const shadowOpacity = useTransition(1, 0, isActive);  const formatMoney = useFormatMoney();  const progress = 0.666 * pressingTime + -66.66  const shadowStyle = {    shadowColor: shadowOpacity.interpolate({      inputRange: [0, 1],      outputRange: ["rgba(0,0,0,1)", "rgba(0,0,0, 0)"],    }),    elevation: 14,  };  useEffect(() => {    if (!focused) {      setPressingTime(0);      return;    }    setTimeout(() => setPressingTime(pressingTime + 10), 10);    if(progress >= 100) {      setFocused(false);      onLongPress();    }  }, [focused, pressingTime]);  return (    <Animated.View      style={{        position: "relative",        display: "flex",        alignItems: "center",        opacity: containerOpacity,        width: fullWidth ? "auto" : 72,        paddingHorizontal: fullWidth ? 6.5 : 0,        marginBottom: 10,      }}    >      <IconButton        disabled={disabled}        variant="filled"        size="medium"        color={itemColors[type]}        icon={          <SvgSelector            id={icon}            size={26}            fill={theme.colors.icons}            stroke={theme.colors.icons}          />        }        styles={{ root: [{ top }, shadowStyle] }}        // onPress={() => !focused && onPress()}        onPressOut={() => {          if(pressingTime < 100) onPress();          setFocused(false);        }}        onPressIn={() => setFocused(true)}        // onLongPress={onLongPress}      />      <Animated.View style={{ position: "absolute", top }} pointerEvents={"none"}>        <CircularProgress          progress={progress}          stroke={theme.colors.foreground}          size={61}        />      </Animated.View>      <Animated.View style={{ opacity }}>        <Text style={style.text}>{name}</Text>        {cashFlow !== undefined && (          <Text style={style.subtext}>{formatMoney(cashFlow)}</Text>        )}      </Animated.View>    </Animated.View>  );};export default Item;