import {	Categories,	Denominations,	TItemCategories, TTransaction, TTransactionBase, TTransactionDenomination,} from "features/transactions/Transactions.types";import {Theme} from "src/providers/themeProvider/ThemeProvider";import {TMoneyFlow} from "src/types";import {TPieChartItem} from "src/components/pieChart/PieChart.types";import moment from "moment";export const canAccept = (  itemType: TItemCategories,  categories: TItemCategories[]): boolean => {  return categories.includes(itemType);};export const getItemColors = (theme: Theme) => ({  income: theme.colors.green,  wallet: theme.colors.blue,  expense: theme.colors.red,});export const getDenomination = (  fromItemType: TItemCategories,  toItemType: TItemCategories): TTransactionDenomination => {  if (fromItemType === Categories.income) return Denominations.income;  if (toItemType === Categories.expense) return Denominations.expense;  return Denominations.transfer};export const getTransactionColors = (theme: Theme) => ({	[Denominations.expense]:theme.colors.error,	[Denominations.transfer]: theme.colors.foreground,	[Denominations.income]: theme.colors.success,})export const TRANSACTION_SIGNS = ({	[Denominations.expense]: '-',	[Denominations.transfer]: '',	[Denominations.income]: '+',})// export const getTransactionsToRepeat = (transactions: TTransaction[], repeatTemplates: TTransaction[]): TTransactionBase[] => {// 	const// 	const repeatTransactions = repeatTemplates.forEach(rT => transactions.filter(t => t?.repeatId === rT.id).forEach(t => {// 		const pastMonth = Math.floor(moment().diff(moment(new Date(t.date)), 'months', true));// 		for (let i = 0; true; i++) {//// 		}// 	}));// 	return []// }