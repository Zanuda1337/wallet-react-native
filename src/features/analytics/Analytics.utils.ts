import moment from "moment";import { TMoneyFlow } from "src/types";import { TPieChartItem } from "src/components/pieChart/PieChart.types";import {  Categories,  TItemCategories,} from "features/transactions/Transactions.types";import {getDateUnits} from "src/utils";export const calculateRange = (date: Date, range: Date[], chartTiming:  "years" | "months" | "weeks" | "days"): Date[] => {  let newRange = [];  if (!range.length) {    return [date, date];  }  if (range.length === 2) {    newRange = [...range];    if (includesDate(range, date)) {      if (        moment(newRange[0]).isSame(date) &&        moment(newRange[1]).isSame(date)      ) {        return [];      }      newRange = [date, date];      return newRange;    }    if (      date.getTime() >      Math.round((newRange[0].getTime() + newRange[1].getTime()) / 2)    ) {      newRange[1] = date;    } else {      newRange[0] = date;    }    return newRange;  }};const includesDate = (array: Date[], date: Date): boolean =>  array.some((d) => d.getTime() === date.getTime());export const convertDynamicsToPieChart = (  dynamics: {    id: number;    date: Date;    expenses: TMoneyFlow[];    incomes: TMoneyFlow[];  }[],  currentCategory: TItemCategories): TPieChartItem[] => {  const activeCategory = currentCategory === Categories.income ? 'incomes' : 'expenses'  const categories: TPieChartItem[] = [];  dynamics.forEach((item) =>    item[activeCategory].forEach((transaction) => {      const category = categories.find((c) => c.label === transaction.category);      const index = categories.indexOf(category)      if (!category)        categories.push({          label: transaction.category,          value: transaction.amount,        });      else categories[index].value+=transaction.amount    })  );  return categories.filter(item => item.value)};