import React, {useEffect, useState} from "react";import { View } from "react-native";import Dialogue from "src/components/dialogue/Dialogue";import Header from "src/components/header/Header";import SvgSelector from "src/components/svgSelector/SvgSelector";import { useStyles, useTheme } from "src/hooks";import { feedStyles } from "features/feed/style";import { capitalize } from "src/utils";import Chip from "features/feed/chip/Chip";import { DENOMINATIONS } from "features/feed/Feed.consts";import { useIntl } from "react-intl";import Slider from "src/components/slider/Slider";import NumericField from "features/feed/feedFilters/numericField/NumericField";import {TFeedFilters} from "features/feed/feedFilters/FeedFilters.types";type TFeedFiltersProps = {  initialFilters: TFeedFilters  filters: TFeedFilters,  visible: boolean;  maxAmount: number;  minAmount: number  onClose: () => void;  onSubmit: (filters: TFeedFilters) => void;};const normalizeRangeInput = (text: string): string | false => {  if(!text) return '0'  let normalizedText = text.replace(',', '.').trim();  if(normalizedText.includes('-')) return false;  if(normalizedText.split('.').length < 2 && normalizedText[0] === '0') normalizedText = normalizedText.length > 1 ?normalizedText.slice(1, normalizedText.length) : normalizedText  if(normalizedText.split('.').length > 2) return false;  if(normalizedText.split('.')[1]?.length > 2) return false;  return normalizedText}const FeedFilters: React.FC<TFeedFiltersProps> = ({  visible,  initialFilters,  filters,  maxAmount,  minAmount,  onClose,  onSubmit,}) => {  const theme = useTheme();  const style = useStyles(feedStyles);  const { formatMessage } = useIntl();  const [disabledDenominations, setDisabledDenominations] = useState<    Array<1 | 0 | -1>  >([]);  const [amountRange, setAmountRange] = useState<[number, number]>([minAmount, maxAmount]);  const [from, setFrom] = useState(amountRange[0].toString());  const [to, setTo] = useState(amountRange[1].toString());  const toggleDenominations = (value: 1 | 0 | -1) => {    if (disabledDenominations.includes(value)) {      setDisabledDenominations(        disabledDenominations.filter((d) => d !== value)      );      return;    }    setDisabledDenominations([...disabledDenominations, value]);  };  const handleChangeFrom = (text: string) => {    let normalizedText = normalizeRangeInput(text);    if(!normalizedText) return;    const toVal = [...amountRange].sort((a, b) => a-b)[1]    if(+normalizedText > toVal) {      normalizedText = toVal.toString()    }    if(+normalizedText < minAmount) {      normalizedText = minAmount.toString()    }    const newRange = [...amountRange].sort((a, b) => a-b)    newRange[0] = +normalizedText    setAmountRange(newRange as [number, number])    setFrom(normalizedText);  };  const handleChangeTo = (text: string) => {    let normalizedText = normalizeRangeInput(text);    if(!normalizedText) return;    const fromVal = [...amountRange].sort((a, b) => a-b)[0]    if(+normalizedText < fromVal) {      normalizedText = fromVal.toString()    }    if(+normalizedText > maxAmount) {      normalizedText = maxAmount.toString()    }    const newRange = [...amountRange].sort((a, b) => a-b)    newRange[1] = +normalizedText    setAmountRange(newRange as [number, number])    setTo(normalizedText);  };  const handleReset = () => {    setDisabledDenominations(initialFilters.disabledDenominations)    setAmountRange(initialFilters.range)    setFrom(initialFilters.range[0].toString())    setTo(initialFilters.range[1].toString());  }  useEffect(() => {    if(!visible) return;    setDisabledDenominations(filters.disabledDenominations)    setAmountRange(filters.range)    setFrom(filters.range[0].toString())    setTo(filters.range[1].toString());  },[visible])  const stepOffset = maxAmount ? maxAmount / 100 % 5 : 0;  const step =    maxAmount ? maxAmount / 100 - (stepOffset < 5 / 2 ? +stepOffset : -(5 - stepOffset)) : 0;  return (    <Dialogue      visible={visible}      onBackdropPress={onClose}      submitButtonProps={{        onPress: () => {          onSubmit({            disabledDenominations: disabledDenominations.sort(              (a, b) => +a[0] - +b[0]            ),            range: amountRange          })          onClose()        },      }}      cancelButtonProps={{ visible: false }}      onClose={onClose}      styles={{        container: {          marginHorizontal: -theme.styles.container.paddingHorizontal,        },      }}      header={        <Header          label={capitalize(formatMessage({id: 'filters'}))}          leftButtonProps={{            size: 35,            icon: (              <SvgSelector                id="reset"                fill={theme.colors.foreground}                size={25}              />            ),            onPress: handleReset,          }}          rightButtonProps={{            size: 35,            icon: (              <SvgSelector                id="multiply"                stroke={theme.colors.foreground}                size={20}              />            ),            onPress: onClose,          }}          styles={{            root: style.filtersHeaderRoot,          }}        />      }    >      <View style={{ width: "100%", display: "flex" }}>        <View style={style.flexWrap}>          {Object.entries(DENOMINATIONS)            .sort((a, b) => +a[0] - +b[0])            .map(([value, label]) => (              <Chip                key={value}                isActive={disabledDenominations.includes(+value as -1 | 0 | 1)}                title={capitalize(formatMessage({ id: label }))}                onPress={() => toggleDenominations(+value as -1 | 0 | 1)}              />            ))}        </View>        {<Slider          thumbDiameter={20}          range          max={maxAmount}          min={minAmount}          step={step}          value={amountRange}          onChange={(value) => {            setAmountRange(value as [number, number])            setFrom(value[0].toString())            setTo(value[1].toString())          }}        />}        <View          style={{            display: "flex",            flexDirection: "row",            gap: 20,            paddingTop: 20,            flexWrap: "wrap",          }}        >          <NumericField            onChange={(value) => handleChangeFrom(value)}            inputMode={"numeric"}            label={capitalize(formatMessage({id: "MIN_AMOUNT"}))}            value={from}            selectTextOnFocus          />          <NumericField            onChange={(value) => handleChangeTo(value)}            inputMode={"numeric"}            label={capitalize(formatMessage({id: "MAX_AMOUNT"}))}            value={to}            selectTextOnFocus          />        </View>      </View>    </Dialogue>  );};export default FeedFilters;