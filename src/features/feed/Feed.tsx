import React, {useCallback, useState} from "react";import {Text, View} from "react-native";import { useTheme } from "src/hooks";import Transaction from "features/feed/transaction/Transaction";import { useAppSelector, useBoundActions } from "src/store/hooks";import { arrayOfUniques, } from "src/utils";import moment from "moment";import { FormattedMessage, useIntl } from "react-intl";import { getTitle } from "./Feed.utils";import { transactionsActions } from "../transactions/Transactions.slice";import { LayoutAnimation } from "react-native";import TransactionModal, {  ITransactionFieldValues,} from "src/components/transactionModal/TransactionModal";import { TTransaction } from "features/transactions/Transactions.types";import {FlashList} from "@shopify/flash-list";const layoutAnimConfig = {  duration: 300,  update: {    type: LayoutAnimation.Types.easeInEaseOut,  },  delete: {    duration: 300,    type: LayoutAnimation.Types.easeInEaseOut,    property: LayoutAnimation.Properties.opacity,  },};const Feed: React.FC = () => {  const theme = useTheme();  const intl = useIntl();  const transactions = useAppSelector(    (state) => state.transactionsReducer.transactions  );  const items = useAppSelector((state) => state.transactionsReducer.items);  const [isTransaction, setTransaction] = useState(false);  const [activeTransaction, setActiveTransaction] =    useState<TTransaction>(undefined);  const transferredItem = items.find(    (item) => activeTransaction?.fromItemId === item.id  );  const acceptedItem = items.find(    (item) => activeTransaction?.toItemId === item.id  );  const dates = arrayOfUniques(transactions.map((item) => item.date))    .map((date) => new Date(date))    .sort((a, b) => (moment(a).isBefore(b) ? 1 : -1));  const boundActions = useBoundActions(transactionsActions);  const handleDelete = (id: number) => {    boundActions.deleteTransaction(id);    LayoutAnimation.configureNext(layoutAnimConfig);  };  const handleEdit = useCallback((data: ITransactionFieldValues) => {    const transaction: TTransaction = {      ...activeTransaction,      ...data,      date: data.date.toString(),    };    boundActions.editTransaction(transaction);    setTransaction(false);  }, [activeTransaction]);  const keyExtractor = useCallback(item => item.toString(), []);  const renderItem = useCallback(({ item: date }) => (    <View style={theme.styles.container}>      <Text style={theme.styles.title}>{getTitle(date, intl)}</Text>      {transactions        .filter((transaction) => {          return moment(new Date(transaction.date)).isSame(date);        })        .map((transaction, index) => {          const fromItem = items.find(            (item) => item.id === transaction.fromItemId          );          const toItem = items.find(            (item) => item.id === transaction.toItemId          );          if (!fromItem || !toItem) return <></>;          return (            <Transaction              key={index}              amount={transaction.amount}              fromItem={fromItem}              toItem={toItem}              disabled={isTransaction}              onDelete={() => handleDelete(transaction.id)}              onEdit={() => {                setTransaction(true);                setActiveTransaction(transaction);              }}            />          );        })}    </View>  ), [transactions, items, isTransaction])  return (    <>      {dates.length > 0 ? (        <FlashList          estimatedItemSize={144}          data={dates}          keyExtractor={keyExtractor}          renderItem={renderItem}        />      ) : (        <View          style={[            theme.styles.container,            {              display: "flex",              flex: 1,              justifyContent: "center",              alignItems: "center",              paddingBottom: 100,            },          ]}        >          <Text            style={[              theme.styles.title,              { textTransform: "none", fontSize: 16 },            ]}          >            <FormattedMessage id="NO_DATA" />          </Text>        </View>      )}      <TransactionModal        visible={isTransaction}        from={transferredItem?.name}        to={acceptedItem?.name}        icon={acceptedItem?.icon}        onHide={() => setActiveTransaction(undefined)}        onSubmit={(data) => handleEdit(data)}        onBackdropPress={() => setTransaction(false)}        initialValues={{          date: new Date(activeTransaction?.date),          amount: activeTransaction?.amount,          note: activeTransaction?.note,        }}        edit      />      <View style={{ marginBottom: 120 }} />    </>  );};export default Feed;