import React, { useState } from "react";import { FlatList, ScrollView, Text, View } from "react-native";import { useTheme } from "src/hooks";import Transaction from "features/feed/transaction/Transaction";import { useAppSelector, useBoundActions } from "src/store/hooks";import { arrayOfUniques, daysPast, pureDate } from "src/utils";import moment from "moment";import { useIntl } from "react-intl";import { getTitle } from "./Feed.utils";import { transactionsActions } from "../transactions/Transactions.slice";import { LayoutAnimation } from "react-native";import TransactionModal from "src/components/transactionModal/TransactionModal";import { TItem, TTransaction } from "features/transactions/Transactions.types";type TFeedProps = {};const Feed: React.FC<TFeedProps> = ({}) => {  const theme = useTheme();  const intl = useIntl();  const transactions = useAppSelector(    (state) => state.transactionsReducer.transactions  );  const items = useAppSelector((state) => state.transactionsReducer.items);  const [isTransaction, setTransaction] = useState(false);  const [activeTransaction, setActiveTransaction] =    useState<TTransaction>(undefined);  const transferredItem = items.find(    (item) => activeTransaction?.fromItemId === item.id  );  const acceptedItem = items.find(    (item) => activeTransaction?.toItemId === item.id  );  const dates = arrayOfUniques(transactions.map((item) => item.date))    .map((date) => new Date(date))    .sort((a, b) => (moment(a).isBefore(b) ? 1 : -1));  const boundActions = useBoundActions(transactionsActions);  const handleDelete = (id: number) => {    boundActions.deleteTransaction(id);    LayoutAnimation.configureNext(layoutAnimConfig);  };  const layoutAnimConfig = {    duration: 300,    update: {      type: LayoutAnimation.Types.easeInEaseOut,    },    delete: {      duration: 300,      type: LayoutAnimation.Types.easeInEaseOut,      property: LayoutAnimation.Properties.opacity,    },  };  return (    <>      <FlatList        data={dates}        keyExtractor={(item) => item.toString()}        renderItem={({ item: date }) => (          <View style={theme.styles.container}>            <Text style={theme.styles.title}>{getTitle(date, intl)}</Text>            {transactions              .filter((transaction) => {                return moment(new Date(transaction.date)).isSame(date);              })              .map((transaction) => {                const fromItem = items.find(                  (item) => item.id === transaction.fromItemId                );                const toItem = items.find(                  (item) => item.id === transaction.toItemId                );                if (!fromItem || !toItem) return <></>;                return (                  <Transaction                    key={transaction.id}                    amount={transaction.amount}                    fromItem={fromItem}                    toItem={toItem}                    onDelete={() => handleDelete(transaction.id)}                    onPress={() => {                      setTransaction(true);                      setActiveTransaction(transaction);                    }}                  />                );              })}          </View>        )}      />      <TransactionModal        visible={isTransaction}        from={transferredItem?.name}        to={acceptedItem?.name}        icon={acceptedItem?.icon}        onHide={() => setActiveTransaction(undefined)}        onSubmit={() => {}}        onBackdropPress={() => setTransaction(false)}      />    </>  );};export default Feed;