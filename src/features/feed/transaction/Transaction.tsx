import React, { useMemo, useRef, useState } from "react";import { View, Text, Animated, PanResponder, Dimensions } from "react-native";import { useFormatMoney, useStyles, useTheme } from "src/hooks";import SvgSelector from "src/components/svgSelector/SvgSelector";import {  getDenomination,  getItemColors,  getTransactionColors,  TRANSACTION_SIGNS,} from "features/transactions/Tansactions.utils";import { feedStyles } from "features/feed/style";import { TItem } from "features/transactions/Transactions.types";type TTransactionProps = {  fromItem: TItem;  toItem: TItem;  amount: number;  onDelete: () => void;  onPress: () => void;};const Transaction: React.FC<TTransactionProps> = ({  fromItem,  toItem,  amount,  onDelete,  onPress}) => {  const theme = useTheme();  const style = useStyles(feedStyles);  const iconColors = getItemColors(theme);  const formatMoney = useFormatMoney();  const denomination = getDenomination(fromItem.type, toItem.type);  const transactionColors = getTransactionColors(theme);  const pan = useRef(new Animated.ValueXY()).current;  const [isDeletePoint, setDeletePoint] = useState(false);  const panResponder = useMemo(    () =>      PanResponder.create({        onStartShouldSetPanResponder: () => true,        onPanResponderMove: (e, gestureState) => {          const breakPoint = -(Dimensions.get("screen").width / 2) + 30;          const isSlided = gestureState.dx <= breakPoint;          if (isDeletePoint) {            Animated.spring(pan, {              toValue: { x: -Dimensions.get("screen").width, y: 0 },              useNativeDriver: false,            }).start();            return;          }          if (isSlided) {            setDeletePoint(true);            setTimeout(onDelete, 300);          }          if (gestureState.dx > 0 && pan.x["_value"] >= 0) return;          pan.x.setValue(gestureState.dx);        },        onPanResponderRelease: (_, gestureState) => {          if (isDeletePoint) return;          if(!gestureState.dx) onPress()          Animated.spring(pan, {            toValue: { x: 0, y: 0 },            useNativeDriver: false,          }).start();        },      }),    [isDeletePoint]  );  return (      <Animated.View        style={[style.container, { transform: pan.getTranslateTransform() }]}        {...panResponder.panHandlers}      >        <View          style={[            theme.styles.circle,            style.circle,            { backgroundColor: iconColors[toItem.type] },          ]}        >          <SvgSelector            id={toItem.icon}            stroke={theme.colors.independentForeground}            fill={theme.colors.independentForeground}            size={22}          />        </View>        <View style={style.textContainer}>          <View style={[style.row]}>            <Text style={style.from}>{fromItem.name}</Text>            <Text              style={[style.price, { color: transactionColors[denomination] }]}            >              {TRANSACTION_SIGNS[denomination] + formatMoney(amount)}            </Text>          </View>          <Text style={style.to}>{toItem.name}</Text>        </View>      </Animated.View>  );};export default Transaction;